- java.util : import 구문 필요

1) StringTokenizer 클래스
 - 문자열을 지정된 구분자로 분리
 - 구분자로 사용할 수 있는 문자는 단 한문자만 가능

 2) Date 클래스
 - 현재 시스템의 날짜, 시간 처리
 - Tue Mar 13: 13:02:55 KST 2025 형태
 - + SimpleDateFormat



 컬렉션 프레임워크
 - 데이터를 담는 다양한 방법에 대한 클래스(인터페이스) 모음
 - java.util.collection
 - List<E> or T, K, V : 객체타입이 필요함

   1) List : 배열과 같은 개념 (중복요소 저장가능)
      - 순서대로 담기, 인덱스로 접근 가능
      - 배열의 단점 (개발자의 불편함) 해결
      - 구현 클래스 : ArrayList, LinkedList, Stack, Queue...
       - ArrayList : 배열과 같은개념의 구조
       - LinkedList : 리스트를 링크(주소)로 연결
       - 순차적으로 추가/삭제 : ArrayList가 LinkedList보다 빠르다 (단, ArrayList의 저장공간이 넉넉해야함)
       - 중간데이터를 추가/삭제 : LinkedList가 ArrayList보다 빠르다
       - Stack : LIFO(Last In First Out) 후입선출 - 수식계산, undo / redo , 브라우저 뒤로 / 앞으로 등에 활용
       - Queue : FIFO(First In First Out) 선입선출 - 버퍼, 최근사용문서 등에 활용


   2) Set : 중복된 요소를 저장하지 않음
        - 순서를 유지하지 않음 (index가 없음)
        - equals() + hashCode() : true 이면 중복된 요소로 처리
        - HashSet : 해싱 적용
        - LinkedHashSet : 순서유지 + 중복요소 배제
        - TreeSet : 중복요소 배제 + 정렬기능

   3) Map
        - collection 자식 아님
        - K(Key), V(Value) 구조 사용
        - K만 중복된 요소 검증
        - HashMap
        - TreeMap

   4) Iterator
        - 컬렉션에 저장된 요소들을 읽어오는 방법에 대한 표준화
        - List, Set 데이터를 읽어오는 방법과 Map 데이터를 읽어오는 방법이 서로 다름
        - hasNext(), next(), remove() ...

   5) Arrays
        - 배열과 관련된 유용한 메소드 제공
        - Arrays.toString(args) : 배열 값 출력
        - Arrays.asList("") : 배열을 리스트로 변환
        - 정렬
          - Arrays.sort(기본타입배열) : 기본적으로 오름차순으로 정렬
          - Arrays.sort(객체타입배열, 정렬조건)
            - Arrays.sort(객체타입배열, Comparator.naturalOrder()) : 오름차순정렬
            - Arrays.sort(객체타입배열, Comparator.reverseOrder()) : 내림차순정렬
        - 검색 : Arrays.binarySearch(배열, 인자)
          - 순차검색 : 배열 첫번째 요소부터 하나씩 검색
          - 이진검색 : 정렬된 데이터에서 범위를 반복적으로 줄여가면서 검색
        - 배열 값 비교 : Arrays.equals(배열1, 배열2)

   6) Comparator 와 Comparable
        - 인터페이스임, 부모 역할
        - Comparator : 기본 정렬 기준 외에 다른 기준으로 정렬하고자 할 때 사용
        - Comparable : 기본 정렬 기준을 구현하는데 사용